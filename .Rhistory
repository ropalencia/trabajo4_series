reticulate::repl_python()
quit
knitr::opts_chunk$set(echo = FALSE)
reticulate::repl_python()
import matplotlib.pyplot as plt
import numpy as np
quit
library(reticulate)
valores <- np.random.randn(5)
valores <- np.arange(1,13)
reticulate::repl_python()
help((np.random.randn())
help((np.random.randn
help(np.random.randn)
valores = np.random.randn(30)
valores
help(np.random.randn)
valores = np.random.randn(30) + np.random.randint(30)
valores
#help(np.random.randn)
valores = np.random.randn(30) + np.random.randint(30)
valores
#help(np.random.randn)
valores = np.random.randn(30) + np.random.randint(30)
valores
valores = np.random.randn(30) + np.random.randint(30)
valores
len(valores)
plt.plot(valores)
plt.show()
plt.plot(valores)
plt.show()
quit
valores <- rnorm(30) + runif(30)
valores <- rnorm(30) + runif(30)
reticulate::repl_python()
plt.plot(r.valores)
plt.main
plt.show()
quit
valores <- rnorm(30) + runif(30)
reticulate::repl_python()
plt.plot(r.valores)
plt.main
plt.show()
quit
valores <- rnorm(30) + runif(30)
reticulate::repl_python()
#plt.main
plt.show()
plt.plot(r.valores)
#plt.main
plt.show()
quit
rm(valores)
rm(py$valores)
reticulate::repl_python()
View(valores)
del valores
quit
valores <- rnorm(30) + runif(30)
length(valores)
reticulate::repl_python()
plt.plot(r.valores)
plt.show()
quit
set.seed(123)
valores <- rnorm(30) + runif(30)
reticulate::repl_python()
plt.plot(r.valores)
plt.show()
quit
quit
set.seed(123)
valores <- rnorm(30) + runif(30)
reticulate::repl_python()
plt.plot(r.valores)
plt.show()
import seaborn as sns
quit
x <- 1:30
y <- 1:30 + rnorm(30)
x;y
x
y
x
y
reticulate::repl_python()
sns.regplot(x=r.x, y=r.y)
sns.show()
sns.regplot(x=r.x, y=r.y)
sns.regplot(x=r.x, y=r.y)
sns.show()
sns.regplot(x=r.x, y=r.y)
sns.regplot(x=r.x, y=r.y)
a =sns.regplot(x=r.x, y=r.y)
a
sns.regplot(x=r.x, y=r.y)
plt.show()
quit
set.seed(123)
x <- 1:30
y <- 1:30# + rnorm(30)
reticulate::repl_python()
sns.regplot(x=r.x, y=r.y)
plt.show()
quit
set.seed(123)
x <- 1:30
y <- 1:30
reticulate::repl_python()
sns.regplot(x=r.x, y=r.y)
plt.show()
x <- 1:30
x <- np.arange(1,31)
y <- np.arange(1,31) + np.random.randn(30)
sns.regplot(x=x, y=y)
plt.show()
x = np.arange(1,31)
y = np.arange(1,31) + np.random.randn(30)
sns.regplot(x=x, y=y)
plt.show()
quit
library(reticulate)
reticulate::repl_python()
x = np.arange(1,31)
y = np.arange(1,31) + np.random.randn(30)
sns.regplot(x=x, y=y)
plt.show()
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
getSymbols('^GSPC', from = '1995-01-01',warnings = FALSE, auto.assign = TRUE)
getSymbols('^GSPC', from = '1995-01-01',warnings = FALSE, auto.assign = TRUE)
# getSymbols('^GSPC', from = '1995-1-1', auto.assign = F)
chart_Series(GSPC)
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
getSymbols('^GSPC', from = '1995-01-01',warnings = FALSE, auto.assign = TRUE)
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
getSymbols('^GSPC', from = '1995-01-01',warnings = FALSE, auto.assign = TRUE)
install.packages('quantmod')
install.packages("quantmod")
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
getSymbols('^GSPC', from = '1995-01-01',warnings = FALSE, auto.assign = TRUE)
# getSymbols('^GSPC', from = '1995-1-1', auto.assign = F)
chart_Series(GSPC)
chart_Series(GSPC['2021-09/2022-11'])
GSPC <- tq_get('^GSPC', from = "2009-01-01", get = "stock.prices")
remove.packages("recipes", lib="~/R/win-library/4.1")
install.packages("recipes")
install.packages("recipes")
install.packages("recipes")
install.packages("recipes")
install.packages("recipes")
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
GSPC <- tq_get('^GSPC', from = "2009-01-01", get = "stock.prices")
GSPC <- tq_get('^GSPC', from = "2009-01-01", get = "stock.prices")
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
GSPC <- tq_get('^GSPC', from = "2009-01-01", get = "stock.prices")
install.packages("recipes")
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
getSymbols('^GSPC', from = '1995-01-01',warnings = FALSE, auto.assign = TRUE)
# getSymbols('^GSPC', from = '1995-1-1', auto.assign = F)
chart_Series(GSPC)
chart_Series(GSPC['2021-09/2022-11'])
GSPC <- tq_get('^GSPC', from = "2009-01-01", get = "stock.prices")
install.packages("recipes")
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
library(tseries)
getSymbols('^GSPC', from = '1995-01-01',warnings = FALSE, auto.assign = TRUE)
chart_Series(GSPC)
chart_Series(GSPC['2021-09/2022-11'])
GSPC <- tq_get('^GSPC', from = "2009-01-01", get = "stock.prices")
View(GSPC)
serie <- GSPC %>%
dplyr::select(date, close)
serie <- serie %>% column_to_rownames(., var = "date")
View(serie)
serie %>% adf.test() # no se rechaza H0, es decir, la serie no es estacionaria
serie$close %>% adf.test() # no se rechaza H0, es decir, la serie no es estacionaria
serie %>% diff() %>% na.omit() %>% adf.test() # se rechaza H0, es decir, la serie diferenciada es estacionaria
serie$close %>% diff() %>% na.omit() %>% adf.test() # se rechaza H0, es decir, la serie diferenciada es estacionaria
?auto.arima
#?auto.arima
# c("aicc", "aic", "bic")
modelo_arima <- auto.arima(serie$close, stepwise = F, approximation = F, ic = "aic")
modelo_arima2 <- auto.arima(serie$close, stepwise = F, approximation = F, ic = "bic")
modelo_arima3 <- auto.arima(serie$close, stepwise = F, approximation = F, ic = "aicc")# ARIMA(2, 1, 2)
modelo_arima
modelo_arima2
modelo_arima3
modelo_arima
modelo_arima2
modelo_arima3
nrow(serie)
serie_train <- serie_train[1:(nrow(serie) - 8),]
serie_train <- serie[1:(nrow(serie) - 8),]
length(serie_train)
ind = 1:(nrow(serie) - 8)
serie_train <- serie[ind,]
length(serie_train)
serie_test <- serie[-ind,]
length(serie_test)
#?auto.arima
modelo_arima <- auto.arima(serie_train$close, stepwise = F, approximation = F, ic = "aic") # ARIMA(2, 1, 2)
modelo_arima2 <- auto.arima(serie_train$close, stepwise = F, approximation = F, ic = "bic") # ARIMA(2, 1, 2)
#?auto.arima
modelo_arima <- auto.arima(serie_train, stepwise = F, approximation = F, ic = "aic") # ARIMA(2, 1, 2)
modelo_arima2 <- auto.arima(serie_train, stepwise = F, approximation = F, ic = "bic") # ARIMA(2, 1, 2)
modelo_arima3 <- auto.arima(serie_train, stepwise = F, approximation = F, ic = "aicc") # ARIMA(2, 1, 2)
modelo_arima
# modelo_arima2
# modelo_arima3
modelo_arima
modelo_arima2
modelo_arima3
modelo_arima
modelo_arima2
modelo_arima3
modelo_arima
modelo_arima2
modelo_arima3
modelo_arima %>% checkresiduals(lag = 20)
View(serie)
pronostico <- forecast(modelo_arima, h=8)
pronostico
pronostico <- forecast(modelo_arima, h=8)
pronostico
nrow(serie_test)
length(serie_test)
pronostico <- forecast(modelo_arima, h=length(serie_test))
pronostico
print(pronostico)
ind = 1:(nrow(GSPC) - 8)
ind
nrow(GSPC) - 8
serie_train <- GSPC[ind,]
serie_test <- GSPC[-ind,]
#?auto.arima
modelo_arima <- auto.arima(serie_train$close, stepwise = F, approximation = F, ic = "aic") # ARIMA(2, 1, 2)
modelo_arima2 <- auto.arima(serie_train$close, stepwise = F, approximation = F, ic = "bic") # ARIMA(2, 1, 2)
modelo_arima3 <- auto.arima(serie_train$close, stepwise = F, approximation = F, ic = "aicc") # ARIMA(2, 1, 2)
modelo_arima
# modelo_arima2
# modelo_arima3
nrow(serie_test)
pronostico <- forecast(modelo_arima, h=nrow(serie_test))
print(pronostico)
pronostico
pronostico$mean
pronostico$series
pronostico$lower
pronostico$upper
sqrt(mean((GSPC$close - pronostico$mean)^2))
sqrt(mean((serie_test$close - pronostico$mean)^2))
knitr::opts_chunk$set(echo = FALSE)
library(quantmod)
library(tidyquant)
library(tidyverse)
library(stats)
require(forecast)
library(TSstudio)
library(tseries)
getSymbols('^GSPC', from = '1995-01-01',warnings = FALSE, auto.assign = TRUE)
chart_Series(GSPC)
chart_Series(GSPC['2021-09/2022-11'])
GSPC <- tq_get('^GSPC', from = "2009-01-01", get = "stock.prices")
serie <- GSPC %>%
dplyr::select(date, close)
serie <- serie %>% column_to_rownames(., var = "date")
View(serie)
#En el ajuste: Con ajuste ´optimo
SEH=HoltWinters(serie,gamma=FALSE)
#En el pron´ostico para m periodos, con I.P del 95 %
predict(SEH,n.ahead=m,prediction.interval=T,level=0.95)
#En el pron´ostico para m periodos, con I.P del 95 %
predict(SEH,n.ahead=8,prediction.interval=T,level=0.95)
